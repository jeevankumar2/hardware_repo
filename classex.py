import xml.etree.ElementTree as ET
import time
from datetime import datetime
import os

prev_br = "nothing";
	
report_template = """
<!DOCTYPE html>
<html>
<head>
<style>
table {{
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 50%;
}}

td {{
  border: 2px solid black;
  text-align: left;
  padding: 8px;
}}

th {{
  border: 2px solid black;
  text-align: left;
  padding: 8px;
}}

</style>
</head>
<body>
<!-- UT report area commented out ***********must be uncommented when integrating into the whole architecture*************. 

<p>This is an autogenerated email from IELEKTRON'S JENKIN SERVER to Capture the results of Unit testing using GoogleTestC++<br>
Kindly have the look at the results and fix the software accordingly </p>
<h2>TEST SUMMARY</h2>
<table>{coverage_report}</table>
<h2>STATIC CODE ANALYSIS RESULTS</h2>
<p>{errors}</p>      -->
<h2>TARGET BUILD DETAILS</h2>
<p>{target_build_sts}</p>
<table>{mem_map_info}</table>
<p>Thanks & Kind Regards
<br>CI Team<br>
IELEKTRON TECHNOLOGIES</p>
</body>
</html>

"""
report_content ="";	
	
class XML_file:
     
    def __init__(self,F_NAME):
			global testsuite;
			global prev_br;
			if(F_NAME[len(F_NAME)-3:len(F_NAME)]=="xml"):
				tree = ET.parse(F_NAME);
				testsuite = tree.getroot();
			else:
				print("not an xml file")
	
    def validate_pin_dep(self, precond):
			ret = 0;
			res = 1;
			for pin,inp in precond.items():
				if(pin[0] == "P"):
					res1 = self.verify_pin_in(pin,inp);
					res = res1 * res;
			if(res == 1):
				print("...................................input dependencies met")
				ret = 1;
			else:
				print("...................................unmet input dependencies")
			return ret;
	
    def validate_var_dep(self, precond):
			ret = 0;
			res = 1;
			for var,val in precond.items():
				if(var[0] != "P")and(var != "des"):
					res1 = self.assign_var_val(var,val);
					res = res1 * res;
			if(res == 1):
				print("...................................variable dependencies met")
				ret = 1;
			else:
				print("...................................unmet variable dependencies")
			return ret;

    def compare_pin_out(self, result):
			ret = 0;
			res = 1;
			for pin,out in result.items():
				if(pin[0] == "P"):
					res1 = self.verify_pin_out(pin,out);
					res = res1 * res;
			if(res == 1):
				print("...................................output peripherals ok")
				ret = 1;
			else:
				print("...................................output peripherals failed")
			return ret;

    def compare_var_out(self, result):
			ret = 0;
			res = 1;
			print("started testing")
			for var,val in result.items():
				if(var[0] != "P")and(var != "addr"):
					res1 = self.compare_var_val(var,val);
					res = res1 * res;
			if(res == 1):
				print("...................................testing variables ok ")
				ret = 1;
			else:
				print("...................................testing variables failed")
			return ret;
			
    def verify_pin_out(self,pin,sts):
			ret = 0;
			print("pin sts: "+str(pin),sts);
			output = debugger.Register.GetValue(pin);
			if(int(sts) == int(output)):
				print("matched")
				ret = 1;
			else:
				print("unmatched")
				x.write_report("pin sts: "+str(pin)+" "+str(output));
				ret = 0;
			return ret;
			
    def verify_pin_in(self,pin,sts):
			ret = 0;
			#time.sleep(1);
			print("pin sts: "+str(pin),sts);
			output = debugger.Register.GetValue(pin);
			if(int(sts) == int(output)):
				print("matched")
				ret = 1;
			else:
				print("unmatched")
				ret = 0;
			return ret;
			
    def assign_var_val(self,var,val):
			debugger.Watch.SetValue(var,val);
			print("input: "+str(var),val);
			return 1;

    def compare_var_val(self,var,val):
			ret = 0;
			print("output: "+str(var),val);
			if(val.isnumeric()):
				val = int(val);
				output = int(ord(debugger.Watch.GetValue(var)[1]));
				print(" ---"+str(output))
			else:
				output = debugger.Watch.GetValue(var);
				print(" ---"+str(output))
			if(val == output):
				ret = 1;
				print("matched")
			else:
				ret = 0;
				print("unmatched")
				x.write_report("pin sts: "+str(var)+" "+str(output));
			return ret;

    def set_break_pt(self,addr):
			global prev_br;
			print("breakpnt addr: "+str(addr));
			breakpoint = BreakCondition()
			breakpoint.Address = addr;
			breakpoint.BreakType = BreakType.Software;
			breakpt_id = debugger.Breakpoint.Set(breakpoint)
			prev_br = breakpt_id;
			#debugger.Go(GoOption.WaitBreak)
			print("...................................setting br_pt success");

    def get_prev_break_pt(self):
			global prev_br;
			print("id"+str(prev_br))
			ret = prev_br;
			return ret;

    def remove_break_pt(self):
			global prev_br;
			if(prev_br != "nothing")and(prev_br != None)and(str(prev_br).isnumeric()):
				debugger.Breakpoint.Delete(prev_br);
				print("...................................removing "+str(prev_br));
				
    def value(self):
			global testsuite;
			return testsuite.tag;
			
    def Module(self):
			global testsuite;
			return testsuite.attrib['module'];
			
    def init_report(self):
		global report_content;
		report_content = "";
		
    def save_report(self,TIMESTAMP):
		global report_content;
		f = open(os.getcwd()+"\\"+TIMESTAMP+".txt","w+");
		f.write(report_content);
		f.close();
		
    def write_report(self,line):
		global report_content;
		report_content = report_content + line + "\n";
		
    def RUN_ALL_FT(self):
			global testsuite;
			for precondition in testsuite:
				print(precondition.attrib);
				access = self.validate_pin_dep(precondition.attrib);
				while(not(access)):
					access = self.validate_pin_dep(precondition.attrib);
					if(not(access)):
						print(precondition.attrib['des']);
					time.sleep(2);
				if(access):
					self.validate_var_dep(precondition.attrib);
					x.write_report(str(precondition.attrib)+"===>set");
					testpoint = iter(precondition);
					time.sleep(1);
					if((debugger.GetBreakStatus() != BreakStatus.None)and(debugger.GetBreakStatus() != BreakStatus.Manual)):
						breakpoint = next(testpoint);
						print(breakpoint.attrib);
						if 'addr' in breakpoint.attrib:
							self.remove_break_pt();
							self.set_break_pt(breakpoint.attrib['addr'])
						debugger.Go(GoOption.WaitBreak);
						while True:
							time.sleep(2);
							if((debugger.GetBreakStatus() != BreakStatus.None)and(debugger.GetBreakStatus() != BreakStatus.Manual)):
								result1 = self.compare_var_out(breakpoint.attrib);
								result2 = self.compare_pin_out(breakpoint.attrib);			 
                                                                if((result1)and(result2)):
									x.write_report(str(breakpoint.attrib)+"===>matched");
								else:
									x.write_report(str(breakpoint.attrib)+"===>unmatched");
								try:
									breakpoint = next(testpoint)
									print(breakpoint.attrib);
									if 'addr' in breakpoint.attrib:
										self.remove_break_pt();
										#print("verify")
										self.set_break_pt(breakpoint.attrib['addr'])
									debugger.Go(GoOption.WaitBreak);
									time.sleep(1);
								except(StopIteration):
									break;
									
					

x = XML_file(os.getcwd()+"\\ex.xml");
x.init_report();
x.write_report("-------start-------");
print(x.Module())	
x.write_report("----clean and build "+ x.Module() +"-----");				
build.Clean()
if(build.All(False,True)):
	print("build success")
	x.write_report("Build success");				
	information = debugger.Map.Information()
	for info in information:
		print(str(info.MapTypeName)+" : "+str(info.AccessSize));
		x.write_report(str(info.MapTypeName)+" : "+str(info.AccessSize));
	emltr = debugger.DebugTool.GetType()
	print("selected emulator is "+str(emltr))
	x.write_report("emulator setting:"+ str(emltr));
	x.write_report("----connecting debugger-----");
	if(debugger.Connect()):
		print("debuggers connected")
		x.write_report("connection success");
		x.write_report("----downloading code-----");
		if(debugger.Download.LoadModule(os.getcwd()+"\\DefaultBuild\DSP_MSG_HANDLER.lmf")):
			print("download success")
			x.write_report("Download success");
			if(debugger.IsConnected()):
				time.sleep(1);
				debugger.Reset();
				x.set_break_pt("main+4");
				debugger.Go(GoOption.WaitBreak);
				x.write_report("----TOT started-----");
				access = debugger.GetBreakStatus();
				while(access == BreakStatus.None or access == BreakStatus.Manual):
					access = debugger.GetBreakStatus();
					time.sleep(2);
				debugger.GetPC()
				print(x.RUN_ALL_FT());
				x.remove_break_pt();
				now = datetime.now()
				now_str = now.strftime("%d_%m_%Y %H.%M.%S")
				x.write_report("TIMESTAMP: "+now_str);
				x.write_report("-------end-------");
				x.save_report("TOT_report");
				print("emulator disconnected");
			else:
				print("disconnected already")
		else:
			print("download failed")
	else:
		print("debuggers connection failure")
